//go:build go1.18
// +build go1.18

// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.9.2, generator: @autorest/go@4.0.0-preview.44)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package 

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
	"time"
)

type SwaggerPetstoreClient struct {
	pl runtime.Pipeline
}

// NewSwaggerPetstoreClient creates a new instance of SwaggerPetstoreClient with the specified values.
// pl - the pipeline used for sending requests and handling responses.
func NewSwaggerPetstoreClient(pl runtime.Pipeline) *SwaggerPetstoreClient {
	client := &SwaggerPetstoreClient{
		pl: pl,
	}
	return client
}

// AddPet - Add a new pet to the store
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 1.0.6
// body - Pet object that needs to be added to the store
// options - SwaggerPetstoreClientAddPetOptions contains the optional parameters for the SwaggerPetstoreClient.AddPet method.
func (client *SwaggerPetstoreClient) AddPet(ctx context.Context, body Pet, options *SwaggerPetstoreClientAddPetOptions) (SwaggerPetstoreClientAddPetResponse, error) {
	req, err := client.addPetCreateRequest(ctx, body, options)
	if err != nil {
		return SwaggerPetstoreClientAddPetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SwaggerPetstoreClientAddPetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusMethodNotAllowed) {
		return SwaggerPetstoreClientAddPetResponse{}, runtime.NewResponseError(resp)
	}
	return SwaggerPetstoreClientAddPetResponse{}, nil
}

// addPetCreateRequest creates the AddPet request.
func (client *SwaggerPetstoreClient) addPetCreateRequest(ctx context.Context, body Pet, options *SwaggerPetstoreClientAddPetOptions) (*policy.Request, error) {
	urlPath := "/pet"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	return req, runtime.MarshalAsJSON(req, body)
}

// CreateUser - This can only be done by the logged in user.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 1.0.6
// body - Created user object
// options - SwaggerPetstoreClientCreateUserOptions contains the optional parameters for the SwaggerPetstoreClient.CreateUser
// method.
func (client *SwaggerPetstoreClient) CreateUser(ctx context.Context, body User, options *SwaggerPetstoreClientCreateUserOptions) (SwaggerPetstoreClientCreateUserResponse, error) {
	req, err := client.createUserCreateRequest(ctx, body, options)
	if err != nil {
		return SwaggerPetstoreClientCreateUserResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SwaggerPetstoreClientCreateUserResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated, http.StatusAccepted, http.StatusNoContent) {
		return SwaggerPetstoreClientCreateUserResponse{}, runtime.NewResponseError(resp)
	}
	return SwaggerPetstoreClientCreateUserResponse{}, nil
}

// createUserCreateRequest creates the CreateUser request.
func (client *SwaggerPetstoreClient) createUserCreateRequest(ctx context.Context, body User, options *SwaggerPetstoreClientCreateUserOptions) (*policy.Request, error) {
	urlPath := "/user"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	return req, runtime.MarshalAsJSON(req, body)
}

// CreateUsersWithArrayInput - Creates list of users with given input array
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 1.0.6
// body - List of user object
// options - SwaggerPetstoreClientCreateUsersWithArrayInputOptions contains the optional parameters for the SwaggerPetstoreClient.CreateUsersWithArrayInput
// method.
func (client *SwaggerPetstoreClient) CreateUsersWithArrayInput(ctx context.Context, body []*User, options *SwaggerPetstoreClientCreateUsersWithArrayInputOptions) (SwaggerPetstoreClientCreateUsersWithArrayInputResponse, error) {
	req, err := client.createUsersWithArrayInputCreateRequest(ctx, body, options)
	if err != nil {
		return SwaggerPetstoreClientCreateUsersWithArrayInputResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SwaggerPetstoreClientCreateUsersWithArrayInputResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated, http.StatusAccepted, http.StatusNoContent) {
		return SwaggerPetstoreClientCreateUsersWithArrayInputResponse{}, runtime.NewResponseError(resp)
	}
	return SwaggerPetstoreClientCreateUsersWithArrayInputResponse{}, nil
}

// createUsersWithArrayInputCreateRequest creates the CreateUsersWithArrayInput request.
func (client *SwaggerPetstoreClient) createUsersWithArrayInputCreateRequest(ctx context.Context, body []*User, options *SwaggerPetstoreClientCreateUsersWithArrayInputOptions) (*policy.Request, error) {
	urlPath := "/user/createWithArray"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	return req, runtime.MarshalAsJSON(req, body)
}

// CreateUsersWithListInput - Creates list of users with given input array
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 1.0.6
// body - List of user object
// options - SwaggerPetstoreClientCreateUsersWithListInputOptions contains the optional parameters for the SwaggerPetstoreClient.CreateUsersWithListInput
// method.
func (client *SwaggerPetstoreClient) CreateUsersWithListInput(ctx context.Context, body []*User, options *SwaggerPetstoreClientCreateUsersWithListInputOptions) (SwaggerPetstoreClientCreateUsersWithListInputResponse, error) {
	req, err := client.createUsersWithListInputCreateRequest(ctx, body, options)
	if err != nil {
		return SwaggerPetstoreClientCreateUsersWithListInputResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SwaggerPetstoreClientCreateUsersWithListInputResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated, http.StatusAccepted, http.StatusNoContent) {
		return SwaggerPetstoreClientCreateUsersWithListInputResponse{}, runtime.NewResponseError(resp)
	}
	return SwaggerPetstoreClientCreateUsersWithListInputResponse{}, nil
}

// createUsersWithListInputCreateRequest creates the CreateUsersWithListInput request.
func (client *SwaggerPetstoreClient) createUsersWithListInputCreateRequest(ctx context.Context, body []*User, options *SwaggerPetstoreClientCreateUsersWithListInputOptions) (*policy.Request, error) {
	urlPath := "/user/createWithList"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	return req, runtime.MarshalAsJSON(req, body)
}

// DeleteOrder - For valid response try integer IDs with positive integer value. Negative or non-integer values will generate
// API errors
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 1.0.6
// orderID - ID of the order that needs to be deleted
// options - SwaggerPetstoreClientDeleteOrderOptions contains the optional parameters for the SwaggerPetstoreClient.DeleteOrder
// method.
func (client *SwaggerPetstoreClient) DeleteOrder(ctx context.Context, orderID int64, options *SwaggerPetstoreClientDeleteOrderOptions) (SwaggerPetstoreClientDeleteOrderResponse, error) {
	req, err := client.deleteOrderCreateRequest(ctx, orderID, options)
	if err != nil {
		return SwaggerPetstoreClientDeleteOrderResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SwaggerPetstoreClientDeleteOrderResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusBadRequest, http.StatusNotFound) {
		return SwaggerPetstoreClientDeleteOrderResponse{}, runtime.NewResponseError(resp)
	}
	return SwaggerPetstoreClientDeleteOrderResponse{}, nil
}

// deleteOrderCreateRequest creates the DeleteOrder request.
func (client *SwaggerPetstoreClient) deleteOrderCreateRequest(ctx context.Context, orderID int64, options *SwaggerPetstoreClientDeleteOrderOptions) (*policy.Request, error) {
	urlPath := "/store/order/{orderId}"
	urlPath = strings.ReplaceAll(urlPath, "{orderId}", url.PathEscape(strconv.FormatInt(orderID, 10)))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}

// DeletePet - Deletes a pet
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 1.0.6
// petID - Pet id to delete
// options - SwaggerPetstoreClientDeletePetOptions contains the optional parameters for the SwaggerPetstoreClient.DeletePet
// method.
func (client *SwaggerPetstoreClient) DeletePet(ctx context.Context, petID int64, options *SwaggerPetstoreClientDeletePetOptions) (SwaggerPetstoreClientDeletePetResponse, error) {
	req, err := client.deletePetCreateRequest(ctx, petID, options)
	if err != nil {
		return SwaggerPetstoreClientDeletePetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SwaggerPetstoreClientDeletePetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusBadRequest, http.StatusNotFound) {
		return SwaggerPetstoreClientDeletePetResponse{}, runtime.NewResponseError(resp)
	}
	return SwaggerPetstoreClientDeletePetResponse{}, nil
}

// deletePetCreateRequest creates the DeletePet request.
func (client *SwaggerPetstoreClient) deletePetCreateRequest(ctx context.Context, petID int64, options *SwaggerPetstoreClientDeletePetOptions) (*policy.Request, error) {
	urlPath := "/pet/{petId}"
	urlPath = strings.ReplaceAll(urlPath, "{petId}", url.PathEscape(strconv.FormatInt(petID, 10)))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	if options != nil && options.APIKey != nil {
		req.Raw().Header["api_key"] = []string{*options.APIKey}
	}
	return req, nil
}

// DeleteUser - This can only be done by the logged in user.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 1.0.6
// username - The name that needs to be deleted
// options - SwaggerPetstoreClientDeleteUserOptions contains the optional parameters for the SwaggerPetstoreClient.DeleteUser
// method.
func (client *SwaggerPetstoreClient) DeleteUser(ctx context.Context, username string, options *SwaggerPetstoreClientDeleteUserOptions) (SwaggerPetstoreClientDeleteUserResponse, error) {
	req, err := client.deleteUserCreateRequest(ctx, username, options)
	if err != nil {
		return SwaggerPetstoreClientDeleteUserResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SwaggerPetstoreClientDeleteUserResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusBadRequest, http.StatusNotFound) {
		return SwaggerPetstoreClientDeleteUserResponse{}, runtime.NewResponseError(resp)
	}
	return SwaggerPetstoreClientDeleteUserResponse{}, nil
}

// deleteUserCreateRequest creates the DeleteUser request.
func (client *SwaggerPetstoreClient) deleteUserCreateRequest(ctx context.Context, username string, options *SwaggerPetstoreClientDeleteUserOptions) (*policy.Request, error) {
	urlPath := "/user/{username}"
	if username == "" {
		return nil, errors.New("parameter username cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{username}", url.PathEscape(username))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}

// FindPetsByStatus - Multiple status values can be provided with comma separated strings
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 1.0.6
// status - Status values that need to be considered for filter
// options - SwaggerPetstoreClientFindPetsByStatusOptions contains the optional parameters for the SwaggerPetstoreClient.FindPetsByStatus
// method.
func (client *SwaggerPetstoreClient) FindPetsByStatus(ctx context.Context, status []Get0ItemsItem, options *SwaggerPetstoreClientFindPetsByStatusOptions) (SwaggerPetstoreClientFindPetsByStatusResponse, error) {
	req, err := client.findPetsByStatusCreateRequest(ctx, status, options)
	if err != nil {
		return SwaggerPetstoreClientFindPetsByStatusResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SwaggerPetstoreClientFindPetsByStatusResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusOK, http.StatusBadRequest) {
		return SwaggerPetstoreClientFindPetsByStatusResponse{}, runtime.NewResponseError(resp)
	}
	return client.findPetsByStatusHandleResponse(resp)
}

// findPetsByStatusCreateRequest creates the FindPetsByStatus request.
func (client *SwaggerPetstoreClient) findPetsByStatusCreateRequest(ctx context.Context, status []Get0ItemsItem, options *SwaggerPetstoreClientFindPetsByStatusOptions) (*policy.Request, error) {
	urlPath := "/pet/findByStatus"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
		for _, qv := range status {
		reqQP.Add("status", string(qv))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json, application/xml"}
	return req, nil
}

// findPetsByStatusHandleResponse handles the FindPetsByStatus response.
func (client *SwaggerPetstoreClient) findPetsByStatusHandleResponse(resp *http.Response) (SwaggerPetstoreClientFindPetsByStatusResponse, error) {
	result := SwaggerPetstoreClientFindPetsByStatusResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PetArray); err != nil {
		return SwaggerPetstoreClientFindPetsByStatusResponse{}, err
	}
	return result, nil
}

// FindPetsByTags - Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 1.0.6
// tags - Tags to filter by
// options - SwaggerPetstoreClientFindPetsByTagsOptions contains the optional parameters for the SwaggerPetstoreClient.FindPetsByTags
// method.
func (client *SwaggerPetstoreClient) FindPetsByTags(ctx context.Context, tags []string, options *SwaggerPetstoreClientFindPetsByTagsOptions) (SwaggerPetstoreClientFindPetsByTagsResponse, error) {
	req, err := client.findPetsByTagsCreateRequest(ctx, tags, options)
	if err != nil {
		return SwaggerPetstoreClientFindPetsByTagsResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SwaggerPetstoreClientFindPetsByTagsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusOK, http.StatusBadRequest) {
		return SwaggerPetstoreClientFindPetsByTagsResponse{}, runtime.NewResponseError(resp)
	}
	return client.findPetsByTagsHandleResponse(resp)
}

// findPetsByTagsCreateRequest creates the FindPetsByTags request.
func (client *SwaggerPetstoreClient) findPetsByTagsCreateRequest(ctx context.Context, tags []string, options *SwaggerPetstoreClientFindPetsByTagsOptions) (*policy.Request, error) {
	urlPath := "/pet/findByTags"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
		for _, qv := range tags {
		reqQP.Add("tags", qv)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json, application/xml"}
	return req, nil
}

// findPetsByTagsHandleResponse handles the FindPetsByTags response.
func (client *SwaggerPetstoreClient) findPetsByTagsHandleResponse(resp *http.Response) (SwaggerPetstoreClientFindPetsByTagsResponse, error) {
	result := SwaggerPetstoreClientFindPetsByTagsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PetArray); err != nil {
		return SwaggerPetstoreClientFindPetsByTagsResponse{}, err
	}
	return result, nil
}

// GetInventory - Returns a map of status codes to quantities
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 1.0.6
// options - SwaggerPetstoreClientGetInventoryOptions contains the optional parameters for the SwaggerPetstoreClient.GetInventory
// method.
func (client *SwaggerPetstoreClient) GetInventory(ctx context.Context, options *SwaggerPetstoreClientGetInventoryOptions) (SwaggerPetstoreClientGetInventoryResponse, error) {
	req, err := client.getInventoryCreateRequest(ctx, options)
	if err != nil {
		return SwaggerPetstoreClientGetInventoryResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SwaggerPetstoreClientGetInventoryResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SwaggerPetstoreClientGetInventoryResponse{}, runtime.NewResponseError(resp)
	}
	return client.getInventoryHandleResponse(resp)
}

// getInventoryCreateRequest creates the GetInventory request.
func (client *SwaggerPetstoreClient) getInventoryCreateRequest(ctx context.Context, options *SwaggerPetstoreClientGetInventoryOptions) (*policy.Request, error) {
	urlPath := "/store/inventory"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getInventoryHandleResponse handles the GetInventory response.
func (client *SwaggerPetstoreClient) getInventoryHandleResponse(resp *http.Response) (SwaggerPetstoreClientGetInventoryResponse, error) {
	result := SwaggerPetstoreClientGetInventoryResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		return SwaggerPetstoreClientGetInventoryResponse{}, err
	}
	return result, nil
}

// GetOrderByID - For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 1.0.6
// orderID - ID of pet that needs to be fetched
// options - SwaggerPetstoreClientGetOrderByIDOptions contains the optional parameters for the SwaggerPetstoreClient.GetOrderByID
// method.
func (client *SwaggerPetstoreClient) GetOrderByID(ctx context.Context, orderID int64, options *SwaggerPetstoreClientGetOrderByIDOptions) (SwaggerPetstoreClientGetOrderByIDResponse, error) {
	req, err := client.getOrderByIDCreateRequest(ctx, orderID, options)
	if err != nil {
		return SwaggerPetstoreClientGetOrderByIDResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SwaggerPetstoreClientGetOrderByIDResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusOK, http.StatusBadRequest, http.StatusNotFound) {
		return SwaggerPetstoreClientGetOrderByIDResponse{}, runtime.NewResponseError(resp)
	}
	return client.getOrderByIDHandleResponse(resp)
}

// getOrderByIDCreateRequest creates the GetOrderByID request.
func (client *SwaggerPetstoreClient) getOrderByIDCreateRequest(ctx context.Context, orderID int64, options *SwaggerPetstoreClientGetOrderByIDOptions) (*policy.Request, error) {
	urlPath := "/store/order/{orderId}"
	urlPath = strings.ReplaceAll(urlPath, "{orderId}", url.PathEscape(strconv.FormatInt(orderID, 10)))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json, application/xml"}
	return req, nil
}

// getOrderByIDHandleResponse handles the GetOrderByID response.
func (client *SwaggerPetstoreClient) getOrderByIDHandleResponse(resp *http.Response) (SwaggerPetstoreClientGetOrderByIDResponse, error) {
	result := SwaggerPetstoreClientGetOrderByIDResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Order); err != nil {
		return SwaggerPetstoreClientGetOrderByIDResponse{}, err
	}
	return result, nil
}

// GetPetByID - Returns a single pet
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 1.0.6
// petID - ID of pet to return
// options - SwaggerPetstoreClientGetPetByIDOptions contains the optional parameters for the SwaggerPetstoreClient.GetPetByID
// method.
func (client *SwaggerPetstoreClient) GetPetByID(ctx context.Context, petID int64, options *SwaggerPetstoreClientGetPetByIDOptions) (SwaggerPetstoreClientGetPetByIDResponse, error) {
	req, err := client.getPetByIDCreateRequest(ctx, petID, options)
	if err != nil {
		return SwaggerPetstoreClientGetPetByIDResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SwaggerPetstoreClientGetPetByIDResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusOK, http.StatusBadRequest, http.StatusNotFound) {
		return SwaggerPetstoreClientGetPetByIDResponse{}, runtime.NewResponseError(resp)
	}
	return client.getPetByIDHandleResponse(resp)
}

// getPetByIDCreateRequest creates the GetPetByID request.
func (client *SwaggerPetstoreClient) getPetByIDCreateRequest(ctx context.Context, petID int64, options *SwaggerPetstoreClientGetPetByIDOptions) (*policy.Request, error) {
	urlPath := "/pet/{petId}"
	urlPath = strings.ReplaceAll(urlPath, "{petId}", url.PathEscape(strconv.FormatInt(petID, 10)))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json, application/xml"}
	return req, nil
}

// getPetByIDHandleResponse handles the GetPetByID response.
func (client *SwaggerPetstoreClient) getPetByIDHandleResponse(resp *http.Response) (SwaggerPetstoreClientGetPetByIDResponse, error) {
	result := SwaggerPetstoreClientGetPetByIDResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Pet); err != nil {
		return SwaggerPetstoreClientGetPetByIDResponse{}, err
	}
	return result, nil
}

// GetUserByName - Get user by user name
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 1.0.6
// username - The name that needs to be fetched. Use user1 for testing.
// options - SwaggerPetstoreClientGetUserByNameOptions contains the optional parameters for the SwaggerPetstoreClient.GetUserByName
// method.
func (client *SwaggerPetstoreClient) GetUserByName(ctx context.Context, username string, options *SwaggerPetstoreClientGetUserByNameOptions) (SwaggerPetstoreClientGetUserByNameResponse, error) {
	req, err := client.getUserByNameCreateRequest(ctx, username, options)
	if err != nil {
		return SwaggerPetstoreClientGetUserByNameResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SwaggerPetstoreClientGetUserByNameResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusOK, http.StatusBadRequest, http.StatusNotFound) {
		return SwaggerPetstoreClientGetUserByNameResponse{}, runtime.NewResponseError(resp)
	}
	return client.getUserByNameHandleResponse(resp)
}

// getUserByNameCreateRequest creates the GetUserByName request.
func (client *SwaggerPetstoreClient) getUserByNameCreateRequest(ctx context.Context, username string, options *SwaggerPetstoreClientGetUserByNameOptions) (*policy.Request, error) {
	urlPath := "/user/{username}"
	if username == "" {
		return nil, errors.New("parameter username cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{username}", url.PathEscape(username))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json, application/xml"}
	return req, nil
}

// getUserByNameHandleResponse handles the GetUserByName response.
func (client *SwaggerPetstoreClient) getUserByNameHandleResponse(resp *http.Response) (SwaggerPetstoreClientGetUserByNameResponse, error) {
	result := SwaggerPetstoreClientGetUserByNameResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.User); err != nil {
		return SwaggerPetstoreClientGetUserByNameResponse{}, err
	}
	return result, nil
}

// LoginUser - Logs user into the system
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 1.0.6
// username - The user name for login
// password - The password for login in clear text
// options - SwaggerPetstoreClientLoginUserOptions contains the optional parameters for the SwaggerPetstoreClient.LoginUser
// method.
func (client *SwaggerPetstoreClient) LoginUser(ctx context.Context, username string, password string, options *SwaggerPetstoreClientLoginUserOptions) (SwaggerPetstoreClientLoginUserResponse, error) {
	req, err := client.loginUserCreateRequest(ctx, username, password, options)
	if err != nil {
		return SwaggerPetstoreClientLoginUserResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SwaggerPetstoreClientLoginUserResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusOK, http.StatusBadRequest) {
		return SwaggerPetstoreClientLoginUserResponse{}, runtime.NewResponseError(resp)
	}
	return client.loginUserHandleResponse(resp)
}

// loginUserCreateRequest creates the LoginUser request.
func (client *SwaggerPetstoreClient) loginUserCreateRequest(ctx context.Context, username string, password string, options *SwaggerPetstoreClientLoginUserOptions) (*policy.Request, error) {
	urlPath := "/user/login"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("username", username)
	reqQP.Set("password", password)
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json, application/xml"}
	return req, nil
}

// loginUserHandleResponse handles the LoginUser response.
func (client *SwaggerPetstoreClient) loginUserHandleResponse(resp *http.Response) (SwaggerPetstoreClientLoginUserResponse, error) {
	result := SwaggerPetstoreClientLoginUserResponse{}
	if val := resp.Header.Get("X-Expires-After"); val != "" {
		xExpiresAfter, err := time.Parse(time.RFC3339Nano, val)
		if err != nil {
			return SwaggerPetstoreClientLoginUserResponse{}, err
		}
		result.XExpiresAfter = &xExpiresAfter
	}
	if val := resp.Header.Get("X-Rate-Limit"); val != "" {
		xRateLimit32, err := strconv.ParseInt(val, 10, 32)
		xRateLimit := int32(xRateLimit32)
		if err != nil {
			return SwaggerPetstoreClientLoginUserResponse{}, err
		}
		result.XRateLimit = &xRateLimit
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		return SwaggerPetstoreClientLoginUserResponse{}, err
	}
	return result, nil
}

// LogoutUser - Logs out current logged in user session
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 1.0.6
// options - SwaggerPetstoreClientLogoutUserOptions contains the optional parameters for the SwaggerPetstoreClient.LogoutUser
// method.
func (client *SwaggerPetstoreClient) LogoutUser(ctx context.Context, options *SwaggerPetstoreClientLogoutUserOptions) (SwaggerPetstoreClientLogoutUserResponse, error) {
	req, err := client.logoutUserCreateRequest(ctx, options)
	if err != nil {
		return SwaggerPetstoreClientLogoutUserResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SwaggerPetstoreClientLogoutUserResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated, http.StatusAccepted, http.StatusNoContent) {
		return SwaggerPetstoreClientLogoutUserResponse{}, runtime.NewResponseError(resp)
	}
	return SwaggerPetstoreClientLogoutUserResponse{}, nil
}

// logoutUserCreateRequest creates the LogoutUser request.
func (client *SwaggerPetstoreClient) logoutUserCreateRequest(ctx context.Context, options *SwaggerPetstoreClientLogoutUserOptions) (*policy.Request, error) {
	urlPath := "/user/logout"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}

// PlaceOrder - Place an order for a pet
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 1.0.6
// body - order placed for purchasing the pet
// options - SwaggerPetstoreClientPlaceOrderOptions contains the optional parameters for the SwaggerPetstoreClient.PlaceOrder
// method.
func (client *SwaggerPetstoreClient) PlaceOrder(ctx context.Context, body Order, options *SwaggerPetstoreClientPlaceOrderOptions) (SwaggerPetstoreClientPlaceOrderResponse, error) {
	req, err := client.placeOrderCreateRequest(ctx, body, options)
	if err != nil {
		return SwaggerPetstoreClientPlaceOrderResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SwaggerPetstoreClientPlaceOrderResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusOK, http.StatusBadRequest) {
		return SwaggerPetstoreClientPlaceOrderResponse{}, runtime.NewResponseError(resp)
	}
	return client.placeOrderHandleResponse(resp)
}

// placeOrderCreateRequest creates the PlaceOrder request.
func (client *SwaggerPetstoreClient) placeOrderCreateRequest(ctx context.Context, body Order, options *SwaggerPetstoreClientPlaceOrderOptions) (*policy.Request, error) {
	urlPath := "/store/order"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json, application/xml"}
	return req, runtime.MarshalAsJSON(req, body)
}

// placeOrderHandleResponse handles the PlaceOrder response.
func (client *SwaggerPetstoreClient) placeOrderHandleResponse(resp *http.Response) (SwaggerPetstoreClientPlaceOrderResponse, error) {
	result := SwaggerPetstoreClientPlaceOrderResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Order); err != nil {
		return SwaggerPetstoreClientPlaceOrderResponse{}, err
	}
	return result, nil
}

// UpdatePet - Update an existing pet
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 1.0.6
// body - Pet object that needs to be added to the store
// options - SwaggerPetstoreClientUpdatePetOptions contains the optional parameters for the SwaggerPetstoreClient.UpdatePet
// method.
func (client *SwaggerPetstoreClient) UpdatePet(ctx context.Context, body Pet, options *SwaggerPetstoreClientUpdatePetOptions) (SwaggerPetstoreClientUpdatePetResponse, error) {
	req, err := client.updatePetCreateRequest(ctx, body, options)
	if err != nil {
		return SwaggerPetstoreClientUpdatePetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SwaggerPetstoreClientUpdatePetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusBadRequest, http.StatusNotFound, http.StatusMethodNotAllowed) {
		return SwaggerPetstoreClientUpdatePetResponse{}, runtime.NewResponseError(resp)
	}
	return SwaggerPetstoreClientUpdatePetResponse{}, nil
}

// updatePetCreateRequest creates the UpdatePet request.
func (client *SwaggerPetstoreClient) updatePetCreateRequest(ctx context.Context, body Pet, options *SwaggerPetstoreClientUpdatePetOptions) (*policy.Request, error) {
	urlPath := "/pet"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	return req, runtime.MarshalAsJSON(req, body)
}

// UpdatePetWithForm - Updates a pet in the store with form data
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 1.0.6
// petID - ID of pet that needs to be updated
// options - SwaggerPetstoreClientUpdatePetWithFormOptions contains the optional parameters for the SwaggerPetstoreClient.UpdatePetWithForm
// method.
func (client *SwaggerPetstoreClient) UpdatePetWithForm(ctx context.Context, petID int64, options *SwaggerPetstoreClientUpdatePetWithFormOptions) (SwaggerPetstoreClientUpdatePetWithFormResponse, error) {
	req, err := client.updatePetWithFormCreateRequest(ctx, petID, options)
	if err != nil {
		return SwaggerPetstoreClientUpdatePetWithFormResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SwaggerPetstoreClientUpdatePetWithFormResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusMethodNotAllowed) {
		return SwaggerPetstoreClientUpdatePetWithFormResponse{}, runtime.NewResponseError(resp)
	}
	return SwaggerPetstoreClientUpdatePetWithFormResponse{}, nil
}

// updatePetWithFormCreateRequest creates the UpdatePetWithForm request.
func (client *SwaggerPetstoreClient) updatePetWithFormCreateRequest(ctx context.Context, petID int64, options *SwaggerPetstoreClientUpdatePetWithFormOptions) (*policy.Request, error) {
	urlPath := "/pet/{petId}"
	urlPath = strings.ReplaceAll(urlPath, "{petId}", url.PathEscape(strconv.FormatInt(petID, 10)))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}

// UpdateUser - This can only be done by the logged in user.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 1.0.6
// username - name that need to be updated
// body - Updated user object
// options - SwaggerPetstoreClientUpdateUserOptions contains the optional parameters for the SwaggerPetstoreClient.UpdateUser
// method.
func (client *SwaggerPetstoreClient) UpdateUser(ctx context.Context, username string, body User, options *SwaggerPetstoreClientUpdateUserOptions) (SwaggerPetstoreClientUpdateUserResponse, error) {
	req, err := client.updateUserCreateRequest(ctx, username, body, options)
	if err != nil {
		return SwaggerPetstoreClientUpdateUserResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SwaggerPetstoreClientUpdateUserResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusBadRequest, http.StatusNotFound) {
		return SwaggerPetstoreClientUpdateUserResponse{}, runtime.NewResponseError(resp)
	}
	return SwaggerPetstoreClientUpdateUserResponse{}, nil
}

// updateUserCreateRequest creates the UpdateUser request.
func (client *SwaggerPetstoreClient) updateUserCreateRequest(ctx context.Context, username string, body User, options *SwaggerPetstoreClientUpdateUserOptions) (*policy.Request, error) {
	urlPath := "/user/{username}"
	if username == "" {
		return nil, errors.New("parameter username cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{username}", url.PathEscape(username))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	return req, runtime.MarshalAsJSON(req, body)
}

// UploadFile - uploads an image
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 1.0.6
// petID - ID of pet to update
// options - SwaggerPetstoreClientUploadFileOptions contains the optional parameters for the SwaggerPetstoreClient.UploadFile
// method.
func (client *SwaggerPetstoreClient) UploadFile(ctx context.Context, petID int64, options *SwaggerPetstoreClientUploadFileOptions) (SwaggerPetstoreClientUploadFileResponse, error) {
	req, err := client.uploadFileCreateRequest(ctx, petID, options)
	if err != nil {
		return SwaggerPetstoreClientUploadFileResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SwaggerPetstoreClientUploadFileResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SwaggerPetstoreClientUploadFileResponse{}, runtime.NewResponseError(resp)
	}
	return client.uploadFileHandleResponse(resp)
}

// uploadFileCreateRequest creates the UploadFile request.
func (client *SwaggerPetstoreClient) uploadFileCreateRequest(ctx context.Context, petID int64, options *SwaggerPetstoreClientUploadFileOptions) (*policy.Request, error) {
	urlPath := "/pet/{petId}/uploadImage"
	urlPath = strings.ReplaceAll(urlPath, "{petId}", url.PathEscape(strconv.FormatInt(petID, 10)))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.SetMultipartFormData(req, map[string]interface{}{
			"AdditionalMetadata": AdditionalMetadata,
			"File": File,
}); err != nil {		return nil, err
	}
	return req, nil
}

// uploadFileHandleResponse handles the UploadFile response.
func (client *SwaggerPetstoreClient) uploadFileHandleResponse(resp *http.Response) (SwaggerPetstoreClientUploadFileResponse, error) {
	result := SwaggerPetstoreClientUploadFileResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.APIResponse); err != nil {
		return SwaggerPetstoreClientUploadFileResponse{}, err
	}
	return result, nil
}

