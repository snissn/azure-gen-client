# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.9.2, generator: @autorest/python@6.1.9)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import sys
from typing import Any, Callable, Dict, IO, List, Optional, TypeVar, Union, cast, overload
from xml.etree import ElementTree as ET

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict

from .._serialization import Serializer
from .._vendor import MixinABC, _format_url_section, raise_if_not_implemented

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


def build_add_pet_request(*, content: Any, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
    # Construct URL
    _url = "/pet"

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, content=content, **kwargs)


def build_update_pet_request(*, content: Any, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
    # Construct URL
    _url = "/pet"

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="PUT", url=_url, headers=_headers, content=content, **kwargs)


def build_find_pets_by_status_request(*, status: List[str], **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json, application/xml")

    # Construct URL
    _url = "/pet/findByStatus"

    # Construct parameters
    _params["status"] = [_SERIALIZER.query("status", q, "str") if q is not None else "" for q in status]

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_find_pets_by_tags_request(*, tags: List[str], **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json, application/xml")

    # Construct URL
    _url = "/pet/findByTags"

    # Construct parameters
    _params["tags"] = [_SERIALIZER.query("tags", q, "str") if q is not None else "" for q in tags]

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_get_pet_by_id_request(pet_id: int, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json, application/xml")

    # Construct URL
    _url = "/pet/{petId}"
    path_format_arguments = {
        "petId": _SERIALIZER.url("pet_id", pet_id, "int"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_headers, **kwargs)


def build_delete_pet_request(pet_id: int, *, api_key: Optional[str] = None, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    # Construct URL
    _url = "/pet/{petId}"
    path_format_arguments = {
        "petId": _SERIALIZER.url("pet_id", pet_id, "int"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    if api_key is not None:
        _headers["api_key"] = _SERIALIZER.header("api_key", api_key, "str")

    return HttpRequest(method="DELETE", url=_url, headers=_headers, **kwargs)


def build_place_order_request(*, json: Any, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
    accept = _headers.pop("Accept", "application/json, application/xml")

    # Construct URL
    _url = "/store/order"

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, json=json, **kwargs)


def build_get_order_by_id_request(order_id: int, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json, application/xml")

    # Construct URL
    _url = "/store/order/{orderId}"
    path_format_arguments = {
        "orderId": _SERIALIZER.url("order_id", order_id, "int", maximum=10, minimum=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_headers, **kwargs)


def build_delete_order_request(order_id: int, **kwargs: Any) -> HttpRequest:
    # Construct URL
    _url = "/store/order/{orderId}"
    path_format_arguments = {
        "orderId": _SERIALIZER.url("order_id", order_id, "int", minimum=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    return HttpRequest(method="DELETE", url=_url, **kwargs)


def build_get_inventory_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/store/inventory"

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_headers, **kwargs)


def build_create_users_with_array_input_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
    # Construct URL
    _url = "/user/createWithArray"

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_create_users_with_list_input_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
    # Construct URL
    _url = "/user/createWithList"

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_get_user_by_name_request(username: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json, application/xml")

    # Construct URL
    _url = "/user/{username}"
    path_format_arguments = {
        "username": _SERIALIZER.url("username", username, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_headers, **kwargs)


def build_update_user_request(username: str, *, json: Any, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
    # Construct URL
    _url = "/user/{username}"
    path_format_arguments = {
        "username": _SERIALIZER.url("username", username, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="PUT", url=_url, headers=_headers, json=json, **kwargs)


def build_delete_user_request(username: str, **kwargs: Any) -> HttpRequest:
    # Construct URL
    _url = "/user/{username}"
    path_format_arguments = {
        "username": _SERIALIZER.url("username", username, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    return HttpRequest(method="DELETE", url=_url, **kwargs)


def build_login_user_request(*, username: str, password: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json, application/xml")

    # Construct URL
    _url = "/user/login"

    # Construct parameters
    _params["username"] = _SERIALIZER.query("username", username, "str")
    _params["password"] = _SERIALIZER.query("password", password, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_logout_user_request(**kwargs: Any) -> HttpRequest:
    # Construct URL
    _url = "/user/logout"

    return HttpRequest(method="GET", url=_url, **kwargs)


def build_create_user_request(*, json: Any, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
    # Construct URL
    _url = "/user"

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, json=json, **kwargs)


class SwaggerPetstoreOperationsMixin(MixinABC):
    def __init__(self):
        raise_if_not_implemented(
            self.__class__,
            [
                "upload_file",
                "update_pet_with_form",
            ],
        )

    @distributed_trace
    def add_pet(self, body: ET.Element, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Add a new pet to the store.

        Add a new pet to the store.

        :param body: Pet object that needs to be added to the store. Required.
        :type body: ET.Element
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "name": "str",  # Required.
                    "photoUrls": [
                        "str"  # Required.
                    ],
                    "category": {
                        "id": 0,  # Optional.
                        "name": "str"  # Optional.
                    },
                    "id": 0,  # Optional.
                    "status": "str",  # Optional. pet status in the store. Known values are:
                      "available", "pending", and "sold".
                    "tags": [
                        {
                            "id": 0,  # Optional.
                            "name": "str"  # Optional.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", "application/json"))  # type: str
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        _content = body

        request = build_add_pet_request(
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [405]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def update_pet(self, body: ET.Element, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Update an existing pet.

        Update an existing pet.

        :param body: Pet object that needs to be added to the store. Required.
        :type body: ET.Element
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "name": "str",  # Required.
                    "photoUrls": [
                        "str"  # Required.
                    ],
                    "category": {
                        "id": 0,  # Optional.
                        "name": "str"  # Optional.
                    },
                    "id": 0,  # Optional.
                    "status": "str",  # Optional. pet status in the store. Known values are:
                      "available", "pending", and "sold".
                    "tags": [
                        {
                            "id": 0,  # Optional.
                            "name": "str"  # Optional.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", "application/json"))  # type: str
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        _content = body

        request = build_update_pet_request(
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [400, 404, 405]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def find_pets_by_status(self, *, status: List[str], **kwargs: Any) -> Optional[ET.Element]:
        """Finds Pets by status.

        Multiple status values can be provided with comma separated strings.

        :keyword status: Status values that need to be considered for filter. Required.
        :paramtype status: list[str]
        :return: XML Element or None
        :rtype: ET.Element or None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 200
                response == [
                    {
                        "name": "str",  # Required.
                        "photoUrls": [
                            "str"  # Required.
                        ],
                        "category": {
                            "id": 0,  # Optional.
                            "name": "str"  # Optional.
                        },
                        "id": 0,  # Optional.
                        "status": "str",  # Optional. pet status in the store. Known values
                          are: "available", "pending", and "sold".
                        "tags": [
                            {
                                "id": 0,  # Optional.
                                "name": "str"  # Optional.
                            }
                        ]
                    }
                ]
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Optional[ET.Element]]

        request = build_find_pets_by_status_request(
            status=status,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 200, 400]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    @distributed_trace
    def find_pets_by_tags(self, *, tags: List[str], **kwargs: Any) -> Optional[ET.Element]:
        """Finds Pets by tags.

        Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.

        :keyword tags: Tags to filter by. Required.
        :paramtype tags: list[str]
        :return: XML Element or None
        :rtype: ET.Element or None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 200
                response == [
                    {
                        "name": "str",  # Required.
                        "photoUrls": [
                            "str"  # Required.
                        ],
                        "category": {
                            "id": 0,  # Optional.
                            "name": "str"  # Optional.
                        },
                        "id": 0,  # Optional.
                        "status": "str",  # Optional. pet status in the store. Known values
                          are: "available", "pending", and "sold".
                        "tags": [
                            {
                                "id": 0,  # Optional.
                                "name": "str"  # Optional.
                            }
                        ]
                    }
                ]
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Optional[ET.Element]]

        request = build_find_pets_by_tags_request(
            tags=tags,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 200, 400]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    @distributed_trace
    def get_pet_by_id(self, pet_id: int, **kwargs: Any) -> Optional[ET.Element]:
        """Find pet by ID.

        Returns a single pet.

        :param pet_id: ID of pet to return. Required.
        :type pet_id: int
        :return: XML Element or None
        :rtype: ET.Element or None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 200
                response == {
                    "name": "str",  # Required.
                    "photoUrls": [
                        "str"  # Required.
                    ],
                    "category": {
                        "id": 0,  # Optional.
                        "name": "str"  # Optional.
                    },
                    "id": 0,  # Optional.
                    "status": "str",  # Optional. pet status in the store. Known values are:
                      "available", "pending", and "sold".
                    "tags": [
                        {
                            "id": 0,  # Optional.
                            "name": "str"  # Optional.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Optional[ET.Element]]

        request = build_get_pet_by_id_request(
            pet_id=pet_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 200, 400, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = ET.fromstring(response.text())
            else:
                deserialized = None

        if response.status_code == 200:
            if response.content:
                deserialized = ET.fromstring(response.text())
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    @distributed_trace
    def delete_pet(  # pylint: disable=inconsistent-return-statements
        self, pet_id: int, *, api_key: Optional[str] = None, **kwargs: Any
    ) -> None:
        """Deletes a pet.

        Deletes a pet.

        :param pet_id: Pet id to delete. Required.
        :type pet_id: int
        :keyword api_key: Default value is None.
        :paramtype api_key: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_delete_pet_request(
            pet_id=pet_id,
            api_key=api_key,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [400, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def place_order(self, body: ET.Element, **kwargs: Any) -> Optional[ET.Element]:
        """Place an order for a pet.

        Place an order for a pet.

        :param body: order placed for purchasing the pet. Required.
        :type body: ET.Element
        :return: XML Element or None
        :rtype: ET.Element or None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "complete": bool,  # Optional.
                    "id": 0,  # Optional.
                    "petId": 0,  # Optional.
                    "quantity": 0,  # Optional.
                    "shipDate": "2020-02-20 00:00:00",  # Optional.
                    "status": "str"  # Optional. Order Status. Known values are: "placed",
                      "approved", and "delivered".
                }

                # response body for status code(s): 200, 200
                response == {
                    "complete": bool,  # Optional.
                    "id": 0,  # Optional.
                    "petId": 0,  # Optional.
                    "quantity": 0,  # Optional.
                    "shipDate": "2020-02-20 00:00:00",  # Optional.
                    "status": "str"  # Optional. Order Status. Known values are: "placed",
                      "approved", and "delivered".
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", "application/json"))  # type: str
        cls = kwargs.pop("cls", None)  # type: ClsType[Optional[ET.Element]]

        _json = body

        request = build_place_order_request(
            content_type=content_type,
            json=_json,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 200, 400]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = ET.fromstring(response.text())
            else:
                deserialized = None

        if response.status_code == 200:
            if response.content:
                deserialized = ET.fromstring(response.text())
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    @distributed_trace
    def get_order_by_id(self, order_id: int, **kwargs: Any) -> Optional[ET.Element]:
        """Find purchase order by ID.

        For valid response try integer IDs with value >= 1 and <= 10. Other values will generated
        exceptions.

        :param order_id: ID of pet that needs to be fetched. Required.
        :type order_id: int
        :return: XML Element or None
        :rtype: ET.Element or None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 200
                response == {
                    "complete": bool,  # Optional.
                    "id": 0,  # Optional.
                    "petId": 0,  # Optional.
                    "quantity": 0,  # Optional.
                    "shipDate": "2020-02-20 00:00:00",  # Optional.
                    "status": "str"  # Optional. Order Status. Known values are: "placed",
                      "approved", and "delivered".
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Optional[ET.Element]]

        request = build_get_order_by_id_request(
            order_id=order_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 200, 400, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = ET.fromstring(response.text())
            else:
                deserialized = None

        if response.status_code == 200:
            if response.content:
                deserialized = ET.fromstring(response.text())
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    @distributed_trace
    def delete_order(self, order_id: int, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Delete purchase order by ID.

        For valid response try integer IDs with positive integer value. Negative or non-integer values
        will generate API errors.

        :param order_id: ID of the order that needs to be deleted. Required.
        :type order_id: int
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_delete_order_request(
            order_id=order_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [400, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def get_inventory(self, **kwargs: Any) -> Dict[str, int]:
        """Returns pet inventories by status.

        Returns a map of status codes to quantities.

        :return: dict mapping str to int
        :rtype: dict[str, int]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "str": 0  # Optional.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, int]]

        request = build_get_inventory_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(Dict[str, int], deserialized), {})

        return cast(Dict[str, int], deserialized)

    @overload
    def create_users_with_array_input(  # pylint: disable=inconsistent-return-statements
        self, body: ET.Element, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Creates list of users with given input array.

        Creates list of users with given input array.

        :param body: List of user object. Required.
        :type body: ET.Element
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = [
                    {
                        "email": "str",  # Optional.
                        "firstName": "str",  # Optional.
                        "id": 0,  # Optional.
                        "lastName": "str",  # Optional.
                        "password": "str",  # Optional.
                        "phone": "str",  # Optional.
                        "userStatus": 0,  # Optional. User Status.
                        "username": "str"  # Optional.
                    }
                ]
        """

    @overload
    def create_users_with_array_input(  # pylint: disable=inconsistent-return-statements
        self, body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Creates list of users with given input array.

        Creates list of users with given input array.

        :param body: List of user object. Required.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def create_users_with_array_input(  # pylint: disable=inconsistent-return-statements
        self, body: Union[ET.Element, IO], **kwargs: Any
    ) -> None:
        """Creates list of users with given input array.

        Creates list of users with given input array.

        :param body: List of user object. Is either a list type or a IO type. Required.
        :type body: ET.Element or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            _json = body

        request = build_create_users_with_array_input_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in []:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @overload
    def create_users_with_list_input(  # pylint: disable=inconsistent-return-statements
        self, body: ET.Element, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Creates list of users with given input array.

        Creates list of users with given input array.

        :param body: List of user object. Required.
        :type body: ET.Element
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = [
                    {
                        "email": "str",  # Optional.
                        "firstName": "str",  # Optional.
                        "id": 0,  # Optional.
                        "lastName": "str",  # Optional.
                        "password": "str",  # Optional.
                        "phone": "str",  # Optional.
                        "userStatus": 0,  # Optional. User Status.
                        "username": "str"  # Optional.
                    }
                ]
        """

    @overload
    def create_users_with_list_input(  # pylint: disable=inconsistent-return-statements
        self, body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Creates list of users with given input array.

        Creates list of users with given input array.

        :param body: List of user object. Required.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def create_users_with_list_input(  # pylint: disable=inconsistent-return-statements
        self, body: Union[ET.Element, IO], **kwargs: Any
    ) -> None:
        """Creates list of users with given input array.

        Creates list of users with given input array.

        :param body: List of user object. Is either a list type or a IO type. Required.
        :type body: ET.Element or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            _json = body

        request = build_create_users_with_list_input_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in []:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def get_user_by_name(self, username: str, **kwargs: Any) -> Optional[ET.Element]:
        """Get user by user name.

        Get user by user name.

        :param username: The name that needs to be fetched. Use user1 for testing. Required.
        :type username: str
        :return: XML Element or None
        :rtype: ET.Element or None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 200
                response == {
                    "email": "str",  # Optional.
                    "firstName": "str",  # Optional.
                    "id": 0,  # Optional.
                    "lastName": "str",  # Optional.
                    "password": "str",  # Optional.
                    "phone": "str",  # Optional.
                    "userStatus": 0,  # Optional. User Status.
                    "username": "str"  # Optional.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Optional[ET.Element]]

        request = build_get_user_by_name_request(
            username=username,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 200, 400, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = ET.fromstring(response.text())
            else:
                deserialized = None

        if response.status_code == 200:
            if response.content:
                deserialized = ET.fromstring(response.text())
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    @distributed_trace
    def update_user(  # pylint: disable=inconsistent-return-statements
        self, username: str, body: ET.Element, **kwargs: Any
    ) -> None:
        """Updated user.

        This can only be done by the logged in user.

        :param username: name that need to be updated. Required.
        :type username: str
        :param body: Updated user object. Required.
        :type body: ET.Element
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "email": "str",  # Optional.
                    "firstName": "str",  # Optional.
                    "id": 0,  # Optional.
                    "lastName": "str",  # Optional.
                    "password": "str",  # Optional.
                    "phone": "str",  # Optional.
                    "userStatus": 0,  # Optional. User Status.
                    "username": "str"  # Optional.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", "application/json"))  # type: str
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        _json = body

        request = build_update_user_request(
            username=username,
            content_type=content_type,
            json=_json,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [400, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def delete_user(self, username: str, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Delete user.

        This can only be done by the logged in user.

        :param username: The name that needs to be deleted. Required.
        :type username: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_delete_user_request(
            username=username,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [400, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def login_user(self, *, username: str, password: str, **kwargs: Any) -> Optional[str]:
        """Logs user into the system.

        Logs user into the system.

        :keyword username: The user name for login. Required.
        :paramtype username: str
        :keyword password: The password for login in clear text. Required.
        :paramtype password: str
        :return: str or None
        :rtype: str or None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Optional[str]]

        request = build_login_user_request(
            username=username,
            password=password,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 200, 400]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        response_headers = {}
        if response.status_code == 200:
            response_headers["X-Expires-After"] = self._deserialize("iso-8601", response.headers.get("X-Expires-After"))
            response_headers["X-Rate-Limit"] = self._deserialize("int", response.headers.get("X-Rate-Limit"))

            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 200:
            response_headers["X-Expires-After"] = self._deserialize("iso-8601", response.headers.get("X-Expires-After"))
            response_headers["X-Rate-Limit"] = self._deserialize("int", response.headers.get("X-Rate-Limit"))

            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized

    @distributed_trace
    def logout_user(self, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Logs out current logged in user session.

        Logs out current logged in user session.

        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_logout_user_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in []:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def create_user(self, body: ET.Element, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Create user.

        This can only be done by the logged in user.

        :param body: Created user object. Required.
        :type body: ET.Element
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "email": "str",  # Optional.
                    "firstName": "str",  # Optional.
                    "id": 0,  # Optional.
                    "lastName": "str",  # Optional.
                    "password": "str",  # Optional.
                    "phone": "str",  # Optional.
                    "userStatus": 0,  # Optional. User Status.
                    "username": "str"  # Optional.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", "application/json"))  # type: str
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        _json = body

        request = build_create_user_request(
            content_type=content_type,
            json=_json,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in []:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})
